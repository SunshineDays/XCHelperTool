//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Area.plist`.
    static let areaPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Area", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Area", withExtension: "plist")`
    static func areaPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.areaPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 83 images.
  struct image {
    /// Image ` ic_tabbar_home_default`.
    static let ic_tabbar_home_default = Rswift.ImageResource(bundle: R.hostingBundle, name: " ic_tabbar_home_default")
    /// Image ` ic_tabbar_home_selected`.
    static let ic_tabbar_home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: " ic_tabbar_home_selected")
    /// Image `chatup_lock`.
    static let chatup_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatup_lock")
    /// Image `chatup_setting`.
    static let chatup_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatup_setting")
    /// Image `chatup_write`.
    static let chatup_write = Rswift.ImageResource(bundle: R.hostingBundle, name: "chatup_write")
    /// Image `circle_comment`.
    static let circle_comment = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle_comment")
    /// Image `circle_follow`.
    static let circle_follow = Rswift.ImageResource(bundle: R.hostingBundle, name: "circle_follow")
    /// Image `gender_female`.
    static let gender_female = Rswift.ImageResource(bundle: R.hostingBundle, name: "gender_female")
    /// Image `gender_male`.
    static let gender_male = Rswift.ImageResource(bundle: R.hostingBundle, name: "gender_male")
    /// Image `gender_none`.
    static let gender_none = Rswift.ImageResource(bundle: R.hostingBundle, name: "gender_none")
    /// Image `ic_tabbar_notification_default`.
    static let ic_tabbar_notification_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_notification_default")
    /// Image `ic_tabbar_notification_selected`.
    static let ic_tabbar_notification_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_notification_selected")
    /// Image `ic_tabbar_profile_default`.
    static let ic_tabbar_profile_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_profile_default")
    /// Image `ic_tabbar_profile_selected`.
    static let ic_tabbar_profile_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar_profile_selected")
    /// Image `icon_tabbar_myup_default`.
    static let icon_tabbar_myup_default = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_myup_default")
    /// Image `icon_tabbar_myup_selected`.
    static let icon_tabbar_myup_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tabbar_myup_selected")
    /// Image `issue_add_photo`.
    static let issue_add_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "issue_add_photo")
    /// Image `issue_tool_camera`.
    static let issue_tool_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "issue_tool_camera")
    /// Image `issue_tool_emjon`.
    static let issue_tool_emjon = Rswift.ImageResource(bundle: R.hostingBundle, name: "issue_tool_emjon")
    /// Image `issue_tool_location`.
    static let issue_tool_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "issue_tool_location")
    /// Image `issue_tool_more`.
    static let issue_tool_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "issue_tool_more")
    /// Image `issue_tool_photo`.
    static let issue_tool_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "issue_tool_photo")
    /// Image `login_background`.
    static let login_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_background")
    /// Image `navigationbar_add`.
    static let navigationbar_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_add")
    /// Image `navigationbar_goback`.
    static let navigationbar_goback = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_goback")
    /// Image `navigationbar_help`.
    static let navigationbar_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_help")
    /// Image `navigationbar_menu`.
    static let navigationbar_menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_menu")
    /// Image `navigationbar_more`.
    static let navigationbar_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_more")
    /// Image `navigationbar_setting`.
    static let navigationbar_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigationbar_setting")
    /// Image `personal_balance`.
    static let personal_balance = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_balance")
    /// Image `personal_bankcard`.
    static let personal_bankcard = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_bankcard")
    /// Image `personal_bill`.
    static let personal_bill = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_bill")
    /// Image `personal_recharge`.
    static let personal_recharge = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_recharge")
    /// Image `personal_redEnvelope`.
    static let personal_redEnvelope = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_redEnvelope")
    /// Image `personal_share`.
    static let personal_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_share")
    /// Image `personal_vip`.
    static let personal_vip = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_vip")
    /// Image `personal_withdraw`.
    static let personal_withdraw = Rswift.ImageResource(bundle: R.hostingBundle, name: "personal_withdraw")
    /// Image `recommend_arrow_right`.
    static let recommend_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "recommend_arrow_right")
    /// Image `recommend_giveup`.
    static let recommend_giveup = Rswift.ImageResource(bundle: R.hostingBundle, name: "recommend_giveup")
    /// Image `recommend_selected_fasle`.
    static let recommend_selected_fasle = Rswift.ImageResource(bundle: R.hostingBundle, name: "recommend_selected_fasle")
    /// Image `recommend_selected_true`.
    static let recommend_selected_true = Rswift.ImageResource(bundle: R.hostingBundle, name: "recommend_selected_true")
    /// Image `recommend_write`.
    static let recommend_write = Rswift.ImageResource(bundle: R.hostingBundle, name: "recommend_write")
    /// Image `share_alipy2`.
    static let share_alipy2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_alipy2")
    /// Image `share_alipy`.
    static let share_alipy = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_alipy")
    /// Image `share_background`.
    static let share_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_background")
    /// Image `share_circle`.
    static let share_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_circle")
    /// Image `share_code`.
    static let share_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_code")
    /// Image `share_copy`.
    static let share_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_copy")
    /// Image `share_logo`.
    static let share_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_logo")
    /// Image `share_more`.
    static let share_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_more")
    /// Image `share_qq2`.
    static let share_qq2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_qq2")
    /// Image `share_qq`.
    static let share_qq = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_qq")
    /// Image `share_safari`.
    static let share_safari = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_safari")
    /// Image `share_sina`.
    static let share_sina = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_sina")
    /// Image `share_sunshinedays`.
    static let share_sunshinedays = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_sunshinedays")
    /// Image `share_weixin`.
    static let share_weixin = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_weixin")
    /// Image `share_wexin2`.
    static let share_wexin2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_wexin2")
    /// Image `share_zone`.
    static let share_zone = Rswift.ImageResource(bundle: R.hostingBundle, name: "share_zone")
    /// Image `shortcut_message`.
    static let shortcut_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "shortcut_message")
    /// Image `shortcut_write`.
    static let shortcut_write = Rswift.ImageResource(bundle: R.hostingBundle, name: "shortcut_write")
    /// Image `takeout_back_gray`.
    static let takeout_back_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "takeout_back_gray")
    /// Image `takeout_back_white`.
    static let takeout_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "takeout_back_white")
    /// Image `takeout_love_gray`.
    static let takeout_love_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "takeout_love_gray")
    /// Image `takeout_love_white`.
    static let takeout_love_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "takeout_love_white")
    /// Image `takeout_love_yellow`.
    static let takeout_love_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "takeout_love_yellow")
    /// Image `takeout_more_gray`.
    static let takeout_more_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "takeout_more_gray")
    /// Image `takeout_more_white`.
    static let takeout_more_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "takeout_more_white")
    /// Image `takeout_search_gray`.
    static let takeout_search_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "takeout_search_gray")
    /// Image `takeout_search_white`.
    static let takeout_search_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "takeout_search_white")
    /// Image `tool_add`.
    static let tool_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_add")
    /// Image `tool_close`.
    static let tool_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_close")
    /// Image `tool_delete`.
    static let tool_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_delete")
    /// Image `tool_down`.
    static let tool_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_down")
    /// Image `tool_help`.
    static let tool_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_help")
    /// Image `tool_hit`.
    static let tool_hit = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_hit")
    /// Image `tool_left`.
    static let tool_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_left")
    /// Image `tool_more`.
    static let tool_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_more")
    /// Image `tool_plus`.
    static let tool_plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_plus")
    /// Image `tool_right`.
    static let tool_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_right")
    /// Image `tool_setting`.
    static let tool_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_setting")
    /// Image `tool_share`.
    static let tool_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_share")
    /// Image `tool_success`.
    static let tool_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_success")
    /// Image `tool_up`.
    static let tool_up = Rswift.ImageResource(bundle: R.hostingBundle, name: "tool_up")
    
    /// `UIImage(named: " ic_tabbar_home_default", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_home_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_home_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: " ic_tabbar_home_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_home_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chatup_lock", bundle: ..., traitCollection: ...)`
    static func chatup_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatup_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chatup_setting", bundle: ..., traitCollection: ...)`
    static func chatup_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatup_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "chatup_write", bundle: ..., traitCollection: ...)`
    static func chatup_write(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chatup_write, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "circle_comment", bundle: ..., traitCollection: ...)`
    static func circle_comment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle_comment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "circle_follow", bundle: ..., traitCollection: ...)`
    static func circle_follow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.circle_follow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gender_female", bundle: ..., traitCollection: ...)`
    static func gender_female(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gender_female, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gender_male", bundle: ..., traitCollection: ...)`
    static func gender_male(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gender_male, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gender_none", bundle: ..., traitCollection: ...)`
    static func gender_none(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gender_none, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_notification_default", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_notification_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_notification_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_notification_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_notification_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_notification_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_profile_default", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_profile_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_profile_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_tabbar_profile_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar_profile_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar_profile_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_myup_default", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_myup_default(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_myup_default, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_tabbar_myup_selected", bundle: ..., traitCollection: ...)`
    static func icon_tabbar_myup_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tabbar_myup_selected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "issue_add_photo", bundle: ..., traitCollection: ...)`
    static func issue_add_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.issue_add_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "issue_tool_camera", bundle: ..., traitCollection: ...)`
    static func issue_tool_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.issue_tool_camera, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "issue_tool_emjon", bundle: ..., traitCollection: ...)`
    static func issue_tool_emjon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.issue_tool_emjon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "issue_tool_location", bundle: ..., traitCollection: ...)`
    static func issue_tool_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.issue_tool_location, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "issue_tool_more", bundle: ..., traitCollection: ...)`
    static func issue_tool_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.issue_tool_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "issue_tool_photo", bundle: ..., traitCollection: ...)`
    static func issue_tool_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.issue_tool_photo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "login_background", bundle: ..., traitCollection: ...)`
    static func login_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_add", bundle: ..., traitCollection: ...)`
    static func navigationbar_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_goback", bundle: ..., traitCollection: ...)`
    static func navigationbar_goback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_goback, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_help", bundle: ..., traitCollection: ...)`
    static func navigationbar_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_menu", bundle: ..., traitCollection: ...)`
    static func navigationbar_menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_menu, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_more", bundle: ..., traitCollection: ...)`
    static func navigationbar_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigationbar_setting", bundle: ..., traitCollection: ...)`
    static func navigationbar_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigationbar_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personal_balance", bundle: ..., traitCollection: ...)`
    static func personal_balance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_balance, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personal_bankcard", bundle: ..., traitCollection: ...)`
    static func personal_bankcard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_bankcard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personal_bill", bundle: ..., traitCollection: ...)`
    static func personal_bill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_bill, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personal_recharge", bundle: ..., traitCollection: ...)`
    static func personal_recharge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_recharge, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personal_redEnvelope", bundle: ..., traitCollection: ...)`
    static func personal_redEnvelope(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_redEnvelope, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personal_share", bundle: ..., traitCollection: ...)`
    static func personal_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personal_vip", bundle: ..., traitCollection: ...)`
    static func personal_vip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_vip, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "personal_withdraw", bundle: ..., traitCollection: ...)`
    static func personal_withdraw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.personal_withdraw, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "recommend_arrow_right", bundle: ..., traitCollection: ...)`
    static func recommend_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recommend_arrow_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "recommend_giveup", bundle: ..., traitCollection: ...)`
    static func recommend_giveup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recommend_giveup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "recommend_selected_fasle", bundle: ..., traitCollection: ...)`
    static func recommend_selected_fasle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recommend_selected_fasle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "recommend_selected_true", bundle: ..., traitCollection: ...)`
    static func recommend_selected_true(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recommend_selected_true, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "recommend_write", bundle: ..., traitCollection: ...)`
    static func recommend_write(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recommend_write, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_alipy", bundle: ..., traitCollection: ...)`
    static func share_alipy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_alipy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_alipy2", bundle: ..., traitCollection: ...)`
    static func share_alipy2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_alipy2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_background", bundle: ..., traitCollection: ...)`
    static func share_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_circle", bundle: ..., traitCollection: ...)`
    static func share_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_circle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_code", bundle: ..., traitCollection: ...)`
    static func share_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_code, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_copy", bundle: ..., traitCollection: ...)`
    static func share_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_copy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_logo", bundle: ..., traitCollection: ...)`
    static func share_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_more", bundle: ..., traitCollection: ...)`
    static func share_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_qq", bundle: ..., traitCollection: ...)`
    static func share_qq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_qq, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_qq2", bundle: ..., traitCollection: ...)`
    static func share_qq2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_qq2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_safari", bundle: ..., traitCollection: ...)`
    static func share_safari(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_safari, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_sina", bundle: ..., traitCollection: ...)`
    static func share_sina(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_sina, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_sunshinedays", bundle: ..., traitCollection: ...)`
    static func share_sunshinedays(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_sunshinedays, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_weixin", bundle: ..., traitCollection: ...)`
    static func share_weixin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_weixin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_wexin2", bundle: ..., traitCollection: ...)`
    static func share_wexin2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_wexin2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share_zone", bundle: ..., traitCollection: ...)`
    static func share_zone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share_zone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shortcut_message", bundle: ..., traitCollection: ...)`
    static func shortcut_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shortcut_message, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shortcut_write", bundle: ..., traitCollection: ...)`
    static func shortcut_write(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shortcut_write, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "takeout_back_gray", bundle: ..., traitCollection: ...)`
    static func takeout_back_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeout_back_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "takeout_back_white", bundle: ..., traitCollection: ...)`
    static func takeout_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeout_back_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "takeout_love_gray", bundle: ..., traitCollection: ...)`
    static func takeout_love_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeout_love_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "takeout_love_white", bundle: ..., traitCollection: ...)`
    static func takeout_love_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeout_love_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "takeout_love_yellow", bundle: ..., traitCollection: ...)`
    static func takeout_love_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeout_love_yellow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "takeout_more_gray", bundle: ..., traitCollection: ...)`
    static func takeout_more_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeout_more_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "takeout_more_white", bundle: ..., traitCollection: ...)`
    static func takeout_more_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeout_more_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "takeout_search_gray", bundle: ..., traitCollection: ...)`
    static func takeout_search_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeout_search_gray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "takeout_search_white", bundle: ..., traitCollection: ...)`
    static func takeout_search_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takeout_search_white, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_add", bundle: ..., traitCollection: ...)`
    static func tool_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_close", bundle: ..., traitCollection: ...)`
    static func tool_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_delete", bundle: ..., traitCollection: ...)`
    static func tool_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_down", bundle: ..., traitCollection: ...)`
    static func tool_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_down, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_help", bundle: ..., traitCollection: ...)`
    static func tool_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_hit", bundle: ..., traitCollection: ...)`
    static func tool_hit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_hit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_left", bundle: ..., traitCollection: ...)`
    static func tool_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_more", bundle: ..., traitCollection: ...)`
    static func tool_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_plus", bundle: ..., traitCollection: ...)`
    static func tool_plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_plus, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_right", bundle: ..., traitCollection: ...)`
    static func tool_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_setting", bundle: ..., traitCollection: ...)`
    static func tool_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_share", bundle: ..., traitCollection: ...)`
    static func tool_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_success", bundle: ..., traitCollection: ...)`
    static func tool_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tool_up", bundle: ..., traitCollection: ...)`
    static func tool_up(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tool_up, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 16 nibs.
  struct nib {
    /// Nib `XCCircleCell`.
    static let xcCircleCell = _R.nib._XCCircleCell()
    /// Nib `XCIssuePhotoCell`.
    static let xcIssuePhotoCell = _R.nib._XCIssuePhotoCell()
    /// Nib `XCIssueToolView`.
    static let xcIssueToolView = _R.nib._XCIssueToolView()
    /// Nib `XCRemindCell`.
    static let xcRemindCell = _R.nib._XCRemindCell()
    /// Nib `XCSettingAboutFooterView`.
    static let xcSettingAboutFooterView = _R.nib._XCSettingAboutFooterView()
    /// Nib `XCSlide1Cell`.
    static let xcSlide1Cell = _R.nib._XCSlide1Cell()
    /// Nib `XCSlide1HeaderCell`.
    static let xcSlide1HeaderCell = _R.nib._XCSlide1HeaderCell()
    /// Nib `XCSlide2Cell`.
    static let xcSlide2Cell = _R.nib._XCSlide2Cell()
    /// Nib `XCSlideFooterCell`.
    static let xcSlideFooterCell = _R.nib._XCSlideFooterCell()
    /// Nib `XCSlideHeaderSectionView`.
    static let xcSlideHeaderSectionView = _R.nib._XCSlideHeaderSectionView()
    /// Nib `XCTakeOutAmountView`.
    static let xcTakeOutAmountView = _R.nib._XCTakeOutAmountView()
    /// Nib `XCTakeOutCartCell`.
    static let xcTakeOutCartCell = _R.nib._XCTakeOutCartCell()
    /// Nib `XCTakeOutCartView`.
    static let xcTakeOutCartView = _R.nib._XCTakeOutCartView()
    /// Nib `XCTakeOutSearchTitleView`.
    static let xcTakeOutSearchTitleView = _R.nib._XCTakeOutSearchTitleView()
    /// Nib `XCTakeOutShopSearchTitleView`.
    static let xcTakeOutShopSearchTitleView = _R.nib._XCTakeOutShopSearchTitleView()
    /// Nib `XCTakeOuteCell`.
    static let xcTakeOuteCell = _R.nib._XCTakeOuteCell()
    
    /// `UINib(name: "XCCircleCell", in: bundle)`
    static func xcCircleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcCircleCell)
    }
    
    /// `UINib(name: "XCIssuePhotoCell", in: bundle)`
    static func xcIssuePhotoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcIssuePhotoCell)
    }
    
    /// `UINib(name: "XCIssueToolView", in: bundle)`
    static func xcIssueToolView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcIssueToolView)
    }
    
    /// `UINib(name: "XCRemindCell", in: bundle)`
    static func xcRemindCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcRemindCell)
    }
    
    /// `UINib(name: "XCSettingAboutFooterView", in: bundle)`
    static func xcSettingAboutFooterView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcSettingAboutFooterView)
    }
    
    /// `UINib(name: "XCSlide1Cell", in: bundle)`
    static func xcSlide1Cell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcSlide1Cell)
    }
    
    /// `UINib(name: "XCSlide1HeaderCell", in: bundle)`
    static func xcSlide1HeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcSlide1HeaderCell)
    }
    
    /// `UINib(name: "XCSlide2Cell", in: bundle)`
    static func xcSlide2Cell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcSlide2Cell)
    }
    
    /// `UINib(name: "XCSlideFooterCell", in: bundle)`
    static func xcSlideFooterCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcSlideFooterCell)
    }
    
    /// `UINib(name: "XCSlideHeaderSectionView", in: bundle)`
    static func xcSlideHeaderSectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcSlideHeaderSectionView)
    }
    
    /// `UINib(name: "XCTakeOutAmountView", in: bundle)`
    static func xcTakeOutAmountView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcTakeOutAmountView)
    }
    
    /// `UINib(name: "XCTakeOutCartCell", in: bundle)`
    static func xcTakeOutCartCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcTakeOutCartCell)
    }
    
    /// `UINib(name: "XCTakeOutCartView", in: bundle)`
    static func xcTakeOutCartView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcTakeOutCartView)
    }
    
    /// `UINib(name: "XCTakeOutSearchTitleView", in: bundle)`
    static func xcTakeOutSearchTitleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcTakeOutSearchTitleView)
    }
    
    /// `UINib(name: "XCTakeOutShopSearchTitleView", in: bundle)`
    static func xcTakeOutShopSearchTitleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcTakeOutShopSearchTitleView)
    }
    
    /// `UINib(name: "XCTakeOuteCell", in: bundle)`
    static func xcTakeOuteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xcTakeOuteCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 8 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `XCCircleCell`.
    static let xcCircleCell: Rswift.ReuseIdentifier<XCCircleCell> = Rswift.ReuseIdentifier(identifier: "XCCircleCell")
    /// Reuse identifier `XCIssuePhotoCell`.
    static let xcIssuePhotoCell: Rswift.ReuseIdentifier<XCIssuePhotoCell> = Rswift.ReuseIdentifier(identifier: "XCIssuePhotoCell")
    /// Reuse identifier `XCRemindCell`.
    static let xcRemindCell: Rswift.ReuseIdentifier<XCRemindCell> = Rswift.ReuseIdentifier(identifier: "XCRemindCell")
    /// Reuse identifier `XCSettingAccountManageCell`.
    static let xcSettingAccountManageCell: Rswift.ReuseIdentifier<XCSettingAccountManageCell> = Rswift.ReuseIdentifier(identifier: "XCSettingAccountManageCell")
    /// Reuse identifier `XCSlide1Cell`.
    static let xcSlide1Cell: Rswift.ReuseIdentifier<XCSlide1Cell> = Rswift.ReuseIdentifier(identifier: "XCSlide1Cell")
    /// Reuse identifier `XCSlideFooterCell`.
    static let xcSlideFooterCell: Rswift.ReuseIdentifier<XCSlideFooterCell> = Rswift.ReuseIdentifier(identifier: "XCSlideFooterCell")
    /// Reuse identifier `XCTakeOutCartCell`.
    static let xcTakeOutCartCell: Rswift.ReuseIdentifier<XCTakeOutCartCell> = Rswift.ReuseIdentifier(identifier: "XCTakeOutCartCell")
    /// Reuse identifier `XCTakeOuteCell`.
    static let xcTakeOuteCell: Rswift.ReuseIdentifier<XCTakeOuteCell> = Rswift.ReuseIdentifier(identifier: "XCTakeOuteCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 18 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `XCAMap`.
    static let xcaMap = _R.storyboard.xcaMap()
    /// Storyboard `XCBalance`.
    static let xcBalance = _R.storyboard.xcBalance()
    /// Storyboard `XCBankCard`.
    static let xcBankCard = _R.storyboard.xcBankCard()
    /// Storyboard `XCBill`.
    static let xcBill = _R.storyboard.xcBill()
    /// Storyboard `XCBluetooth`.
    static let xcBluetooth = _R.storyboard.xcBluetooth()
    /// Storyboard `XCChatUp`.
    static let xcChatUp = _R.storyboard.xcChatUp()
    /// Storyboard `XCCircle`.
    static let xcCircle = _R.storyboard.xcCircle()
    /// Storyboard `XCHome`.
    static let xcHome = _R.storyboard.xcHome()
    /// Storyboard `XCInformation`.
    static let xcInformation = _R.storyboard.xcInformation()
    /// Storyboard `XCIssue`.
    static let xcIssue = _R.storyboard.xcIssue()
    /// Storyboard `XCPay`.
    static let xcPay = _R.storyboard.xcPay()
    /// Storyboard `XCPersonal`.
    static let xcPersonal = _R.storyboard.xcPersonal()
    /// Storyboard `XCRemind`.
    static let xcRemind = _R.storyboard.xcRemind()
    /// Storyboard `XCSetting`.
    static let xcSetting = _R.storyboard.xcSetting()
    /// Storyboard `XCTakeOut`.
    static let xcTakeOut = _R.storyboard.xcTakeOut()
    /// Storyboard `XCUser`.
    static let xcUser = _R.storyboard.xcUser()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "XCAMap", bundle: ...)`
    static func xcaMap(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcaMap)
    }
    
    /// `UIStoryboard(name: "XCBalance", bundle: ...)`
    static func xcBalance(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcBalance)
    }
    
    /// `UIStoryboard(name: "XCBankCard", bundle: ...)`
    static func xcBankCard(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcBankCard)
    }
    
    /// `UIStoryboard(name: "XCBill", bundle: ...)`
    static func xcBill(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcBill)
    }
    
    /// `UIStoryboard(name: "XCBluetooth", bundle: ...)`
    static func xcBluetooth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcBluetooth)
    }
    
    /// `UIStoryboard(name: "XCChatUp", bundle: ...)`
    static func xcChatUp(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcChatUp)
    }
    
    /// `UIStoryboard(name: "XCCircle", bundle: ...)`
    static func xcCircle(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcCircle)
    }
    
    /// `UIStoryboard(name: "XCHome", bundle: ...)`
    static func xcHome(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcHome)
    }
    
    /// `UIStoryboard(name: "XCInformation", bundle: ...)`
    static func xcInformation(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcInformation)
    }
    
    /// `UIStoryboard(name: "XCIssue", bundle: ...)`
    static func xcIssue(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcIssue)
    }
    
    /// `UIStoryboard(name: "XCPay", bundle: ...)`
    static func xcPay(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcPay)
    }
    
    /// `UIStoryboard(name: "XCPersonal", bundle: ...)`
    static func xcPersonal(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcPersonal)
    }
    
    /// `UIStoryboard(name: "XCRemind", bundle: ...)`
    static func xcRemind(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcRemind)
    }
    
    /// `UIStoryboard(name: "XCSetting", bundle: ...)`
    static func xcSetting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcSetting)
    }
    
    /// `UIStoryboard(name: "XCTakeOut", bundle: ...)`
    static func xcTakeOut(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcTakeOut)
    }
    
    /// `UIStoryboard(name: "XCUser", bundle: ...)`
    static func xcUser(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.xcUser)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _XCCircleCell.validate()
      try _XCIssuePhotoCell.validate()
      try _XCSlideHeaderSectionView.validate()
      try _XCTakeOutSearchTitleView.validate()
      try _XCTakeOutAmountView.validate()
      try _XCRemindCell.validate()
      try _XCTakeOutShopSearchTitleView.validate()
      try _XCIssueToolView.validate()
    }
    
    struct _XCCircleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = XCCircleCell
      
      let bundle = R.hostingBundle
      let identifier = "XCCircleCell"
      let name = "XCCircleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCCircleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCCircleCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "share_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_logo' is used in nib 'XCCircleCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "circle_comment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'circle_comment' is used in nib 'XCCircleCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _XCIssuePhotoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = XCIssuePhotoCell
      
      let bundle = R.hostingBundle
      let identifier = "XCIssuePhotoCell"
      let name = "XCIssuePhotoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCIssuePhotoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCIssuePhotoCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "issue_add_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'issue_add_photo' is used in nib 'XCIssuePhotoCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tool_delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tool_delete' is used in nib 'XCIssuePhotoCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _XCIssueToolView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCIssueToolView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCIssueToolView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCIssueToolView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "issue_tool_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'issue_tool_location' is used in nib 'XCIssueToolView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "issue_tool_emjon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'issue_tool_emjon' is used in nib 'XCIssueToolView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "issue_tool_more", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'issue_tool_more' is used in nib 'XCIssueToolView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "issue_tool_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'issue_tool_photo' is used in nib 'XCIssueToolView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "issue_tool_camera", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'issue_tool_camera' is used in nib 'XCIssueToolView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _XCRemindCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = XCRemindCell
      
      let bundle = R.hostingBundle
      let identifier = "XCRemindCell"
      let name = "XCRemindCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCRemindCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCRemindCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "recommend_selected_true", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'recommend_selected_true' is used in nib 'XCRemindCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _XCSettingAboutFooterView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "XCSettingAboutFooterView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCSettingAboutFooterView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCSettingAboutFooterView
      }
      
      fileprivate init() {}
    }
    
    struct _XCSlide1Cell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = XCSlide1Cell
      
      let bundle = R.hostingBundle
      let identifier = "XCSlide1Cell"
      let name = "XCSlide1Cell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCSlide1Cell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCSlide1Cell
      }
      
      fileprivate init() {}
    }
    
    struct _XCSlide1HeaderCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "XCSlide1HeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCSlide1HeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCSlide1HeaderCell
      }
      
      fileprivate init() {}
    }
    
    struct _XCSlide2Cell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "XCSlide2Cell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCSlide2Cell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCSlide2Cell
      }
      
      fileprivate init() {}
    }
    
    struct _XCSlideFooterCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = XCSlideFooterCell
      
      let bundle = R.hostingBundle
      let identifier = "XCSlideFooterCell"
      let name = "XCSlideFooterCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCSlideFooterCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCSlideFooterCell
      }
      
      fileprivate init() {}
    }
    
    struct _XCSlideHeaderSectionView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCSlideHeaderSectionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCSlideHeaderSectionView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCSlideHeaderSectionView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tool_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tool_down' is used in nib 'XCSlideHeaderSectionView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _XCTakeOutAmountView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCTakeOutAmountView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCTakeOutAmountView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCTakeOutAmountView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "share_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_logo' is used in nib 'XCTakeOutAmountView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _XCTakeOutCartCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = XCTakeOutCartCell
      
      let bundle = R.hostingBundle
      let identifier = "XCTakeOutCartCell"
      let name = "XCTakeOutCartCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCTakeOutCartCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCTakeOutCartCell
      }
      
      fileprivate init() {}
    }
    
    struct _XCTakeOutCartView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "XCTakeOutCartView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCTakeOutCartView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCTakeOutCartView
      }
      
      fileprivate init() {}
    }
    
    struct _XCTakeOutSearchTitleView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCTakeOutSearchTitleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCTakeOutSearchTitleView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCTakeOutSearchTitleView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "takeout_back_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'takeout_back_gray' is used in nib 'XCTakeOutSearchTitleView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _XCTakeOutShopSearchTitleView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCTakeOutShopSearchTitleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCTakeOutShopSearchTitleView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCTakeOutShopSearchTitleView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      func thirdView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[2] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "takeout_back_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'takeout_back_white' is used in nib 'XCTakeOutShopSearchTitleView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "takeout_more_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'takeout_more_white' is used in nib 'XCTakeOutShopSearchTitleView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "takeout_love_yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'takeout_love_yellow' is used in nib 'XCTakeOutShopSearchTitleView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "takeout_search_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'takeout_search_white' is used in nib 'XCTakeOutShopSearchTitleView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _XCTakeOuteCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = XCTakeOuteCell
      
      let bundle = R.hostingBundle
      let identifier = "XCTakeOuteCell"
      let name = "XCTakeOuteCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> XCTakeOuteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XCTakeOuteCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try xcInformation.validate()
      try xcHome.validate()
      try xcBankCard.validate()
      try xcSetting.validate()
      try xcTakeOut.validate()
      try xcUser.validate()
      try xcIssue.validate()
      try xcBalance.validate()
      try xcChatUp.validate()
      try xcBill.validate()
      try xcCircle.validate()
      try xcRemind.validate()
      try xcPersonal.validate()
      try xcPay.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct xcBalance: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCBalance"
      let xcBalanceController = StoryboardViewControllerResource<XCBalanceController>(identifier: "XCBalanceController")
      let xcBalanceRechargeController = StoryboardViewControllerResource<XCBalanceRechargeController>(identifier: "XCBalanceRechargeController")
      let xcBalanceWithdrawController = StoryboardViewControllerResource<XCBalanceWithdrawController>(identifier: "XCBalanceWithdrawController")
      
      func xcBalanceController(_: Void = ()) -> XCBalanceController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcBalanceController)
      }
      
      func xcBalanceRechargeController(_: Void = ()) -> XCBalanceRechargeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcBalanceRechargeController)
      }
      
      func xcBalanceWithdrawController(_: Void = ()) -> XCBalanceWithdrawController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcBalanceWithdrawController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "personal_recharge") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personal_recharge' is used in storyboard 'XCBalance', but couldn't be loaded.") }
        if UIKit.UIImage(named: "personal_redEnvelope") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personal_redEnvelope' is used in storyboard 'XCBalance', but couldn't be loaded.") }
        if UIKit.UIImage(named: "personal_withdraw") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personal_withdraw' is used in storyboard 'XCBalance', but couldn't be loaded.") }
        if _R.storyboard.xcBalance().xcBalanceController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcBalanceController' could not be loaded from storyboard 'XCBalance' as 'XCBalanceController'.") }
        if _R.storyboard.xcBalance().xcBalanceRechargeController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcBalanceRechargeController' could not be loaded from storyboard 'XCBalance' as 'XCBalanceRechargeController'.") }
        if _R.storyboard.xcBalance().xcBalanceWithdrawController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcBalanceWithdrawController' could not be loaded from storyboard 'XCBalance' as 'XCBalanceWithdrawController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcBankCard: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCBankCard"
      let xcBankCardAddController = StoryboardViewControllerResource<XCBankCardAddController>(identifier: "XCBankCardAddController")
      let xcBankCardController = StoryboardViewControllerResource<XCBankCardController>(identifier: "XCBankCardController")
      let xcBankCardInfoCreditController = StoryboardViewControllerResource<XCBankCardInfoCreditController>(identifier: "XCBankCardInfoCreditController")
      let xcBankCardInfoDeibtController = StoryboardViewControllerResource<XCBankCardInfoDeibtController>(identifier: "XCBankCardInfoDeibtController")
      
      func xcBankCardAddController(_: Void = ()) -> XCBankCardAddController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcBankCardAddController)
      }
      
      func xcBankCardController(_: Void = ()) -> XCBankCardController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcBankCardController)
      }
      
      func xcBankCardInfoCreditController(_: Void = ()) -> XCBankCardInfoCreditController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcBankCardInfoCreditController)
      }
      
      func xcBankCardInfoDeibtController(_: Void = ()) -> XCBankCardInfoDeibtController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcBankCardInfoDeibtController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "navigationbar_add") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'navigationbar_add' is used in storyboard 'XCBankCard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tool_hit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tool_hit' is used in storyboard 'XCBankCard', but couldn't be loaded.") }
        if UIKit.UIImage(named: "navigationbar_help") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'navigationbar_help' is used in storyboard 'XCBankCard', but couldn't be loaded.") }
        if _R.storyboard.xcBankCard().xcBankCardInfoDeibtController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcBankCardInfoDeibtController' could not be loaded from storyboard 'XCBankCard' as 'XCBankCardInfoDeibtController'.") }
        if _R.storyboard.xcBankCard().xcBankCardAddController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcBankCardAddController' could not be loaded from storyboard 'XCBankCard' as 'XCBankCardAddController'.") }
        if _R.storyboard.xcBankCard().xcBankCardController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcBankCardController' could not be loaded from storyboard 'XCBankCard' as 'XCBankCardController'.") }
        if _R.storyboard.xcBankCard().xcBankCardInfoCreditController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcBankCardInfoCreditController' could not be loaded from storyboard 'XCBankCard' as 'XCBankCardInfoCreditController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcBill: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCBill"
      let xcBillChartController = StoryboardViewControllerResource<XCBillChartController>(identifier: "XCBillChartController")
      let xcBillController = StoryboardViewControllerResource<XCBillController>(identifier: "XCBillController")
      
      func xcBillChartController(_: Void = ()) -> XCBillChartController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcBillChartController)
      }
      
      func xcBillController(_: Void = ()) -> XCBillController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcBillController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "navigationbar_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'navigationbar_more' is used in storyboard 'XCBill', but couldn't be loaded.") }
        if _R.storyboard.xcBill().xcBillController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcBillController' could not be loaded from storyboard 'XCBill' as 'XCBillController'.") }
        if _R.storyboard.xcBill().xcBillChartController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcBillChartController' could not be loaded from storyboard 'XCBill' as 'XCBillChartController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcBluetooth: Rswift.StoryboardResourceType {
      let bundle = R.hostingBundle
      let name = "XCBluetooth"
      
      fileprivate init() {}
    }
    
    struct xcChatUp: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCChatUp"
      let xcChatUpController = StoryboardViewControllerResource<XCChatUpController>(identifier: "XCChatUpController")
      let xcChatUpSettingController = StoryboardViewControllerResource<XCChatUpSettingController>(identifier: "XCChatUpSettingController")
      let xcChatUpWriteController = StoryboardViewControllerResource<XCChatUpWriteController>(identifier: "XCChatUpWriteController")
      
      func xcChatUpController(_: Void = ()) -> XCChatUpController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcChatUpController)
      }
      
      func xcChatUpSettingController(_: Void = ()) -> XCChatUpSettingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcChatUpSettingController)
      }
      
      func xcChatUpWriteController(_: Void = ()) -> XCChatUpWriteController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcChatUpWriteController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "chatup_setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatup_setting' is used in storyboard 'XCChatUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chatup_write") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatup_write' is used in storyboard 'XCChatUp', but couldn't be loaded.") }
        if UIKit.UIImage(named: "chatup_lock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'chatup_lock' is used in storyboard 'XCChatUp', but couldn't be loaded.") }
        if _R.storyboard.xcChatUp().xcChatUpSettingController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcChatUpSettingController' could not be loaded from storyboard 'XCChatUp' as 'XCChatUpSettingController'.") }
        if _R.storyboard.xcChatUp().xcChatUpController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcChatUpController' could not be loaded from storyboard 'XCChatUp' as 'XCChatUpController'.") }
        if _R.storyboard.xcChatUp().xcChatUpWriteController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcChatUpWriteController' could not be loaded from storyboard 'XCChatUp' as 'XCChatUpWriteController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcCircle: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCCircle"
      let xcCircleController = StoryboardViewControllerResource<XCCircleController>(identifier: "XCCircleController")
      
      func xcCircleController(_: Void = ()) -> XCCircleController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcCircleController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "share_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_logo' is used in storyboard 'XCCircle', but couldn't be loaded.") }
        if _R.storyboard.xcCircle().xcCircleController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcCircleController' could not be loaded from storyboard 'XCCircle' as 'XCCircleController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcHome: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCHome"
      let xcHomeController = StoryboardViewControllerResource<XCHomeController>(identifier: "XCHomeController")
      
      func xcHomeController(_: Void = ()) -> XCHomeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcHomeController)
      }
      
      static func validate() throws {
        if _R.storyboard.xcHome().xcHomeController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcHomeController' could not be loaded from storyboard 'XCHome' as 'XCHomeController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcInformation: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCInformation"
      let xcInformationAreaController = StoryboardViewControllerResource<XCInformationAreaController>(identifier: "XCInformationAreaController")
      let xcInformationAreaShowController = StoryboardViewControllerResource<XCInformationAreaShowController>(identifier: "XCInformationAreaShowController")
      let xcInformationAvatarController = StoryboardViewControllerResource<XCInformationAvatarController>(identifier: "XCInformationAvatarController")
      let xcInformationCertificationController = StoryboardViewControllerResource<XCInformationCertificationController>(identifier: "XCInformationCertificationController")
      let xcInformationController = StoryboardViewControllerResource<XCInformationController>(identifier: "XCInformationController")
      let xcInformationInputInforController = StoryboardViewControllerResource<XCInformationInputInforController>(identifier: "XCInformationInputInforController")
      let xcInformationQRCodeController = StoryboardViewControllerResource<XCInformationQRCodeController>(identifier: "XCInformationQRCodeController")
      
      func xcInformationAreaController(_: Void = ()) -> XCInformationAreaController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcInformationAreaController)
      }
      
      func xcInformationAreaShowController(_: Void = ()) -> XCInformationAreaShowController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcInformationAreaShowController)
      }
      
      func xcInformationAvatarController(_: Void = ()) -> XCInformationAvatarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcInformationAvatarController)
      }
      
      func xcInformationCertificationController(_: Void = ()) -> XCInformationCertificationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcInformationCertificationController)
      }
      
      func xcInformationController(_: Void = ()) -> XCInformationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcInformationController)
      }
      
      func xcInformationInputInforController(_: Void = ()) -> XCInformationInputInforController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcInformationInputInforController)
      }
      
      func xcInformationQRCodeController(_: Void = ()) -> XCInformationQRCodeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcInformationQRCodeController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "share_code") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_code' is used in storyboard 'XCInformation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "navigationbar_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'navigationbar_more' is used in storyboard 'XCInformation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gender_male") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gender_male' is used in storyboard 'XCInformation', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_logo' is used in storyboard 'XCInformation', but couldn't be loaded.") }
        if _R.storyboard.xcInformation().xcInformationAreaController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcInformationAreaController' could not be loaded from storyboard 'XCInformation' as 'XCInformationAreaController'.") }
        if _R.storyboard.xcInformation().xcInformationAvatarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcInformationAvatarController' could not be loaded from storyboard 'XCInformation' as 'XCInformationAvatarController'.") }
        if _R.storyboard.xcInformation().xcInformationCertificationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcInformationCertificationController' could not be loaded from storyboard 'XCInformation' as 'XCInformationCertificationController'.") }
        if _R.storyboard.xcInformation().xcInformationAreaShowController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcInformationAreaShowController' could not be loaded from storyboard 'XCInformation' as 'XCInformationAreaShowController'.") }
        if _R.storyboard.xcInformation().xcInformationQRCodeController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcInformationQRCodeController' could not be loaded from storyboard 'XCInformation' as 'XCInformationQRCodeController'.") }
        if _R.storyboard.xcInformation().xcInformationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcInformationController' could not be loaded from storyboard 'XCInformation' as 'XCInformationController'.") }
        if _R.storyboard.xcInformation().xcInformationInputInforController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcInformationInputInforController' could not be loaded from storyboard 'XCInformation' as 'XCInformationInputInforController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcIssue: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCIssue"
      let xcIssueController = StoryboardViewControllerResource<XCIssueController>(identifier: "XCIssueController")
      
      func xcIssueController(_: Void = ()) -> XCIssueController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcIssueController)
      }
      
      static func validate() throws {
        if _R.storyboard.xcIssue().xcIssueController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcIssueController' could not be loaded from storyboard 'XCIssue' as 'XCIssueController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcPay: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCPay"
      let xcPayInputPasswordController = StoryboardViewControllerResource<XCPayInputPasswordController>(identifier: "XCPayInputPasswordController")
      
      func xcPayInputPasswordController(_: Void = ()) -> XCPayInputPasswordController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcPayInputPasswordController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "tool_close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tool_close' is used in storyboard 'XCPay', but couldn't be loaded.") }
        if _R.storyboard.xcPay().xcPayInputPasswordController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcPayInputPasswordController' could not be loaded from storyboard 'XCPay' as 'XCPayInputPasswordController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcPersonal: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCPersonal"
      let xcPersonalController = StoryboardViewControllerResource<XCPersonalController>(identifier: "XCPersonalController")
      
      func xcPersonalController(_: Void = ()) -> XCPersonalController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcPersonalController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "personal_bankcard") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personal_bankcard' is used in storyboard 'XCPersonal', but couldn't be loaded.") }
        if UIKit.UIImage(named: "personal_bill") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personal_bill' is used in storyboard 'XCPersonal', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_logo' is used in storyboard 'XCPersonal', but couldn't be loaded.") }
        if UIKit.UIImage(named: "shortcut_message") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'shortcut_message' is used in storyboard 'XCPersonal', but couldn't be loaded.") }
        if UIKit.UIImage(named: "navigationbar_setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'navigationbar_setting' is used in storyboard 'XCPersonal', but couldn't be loaded.") }
        if UIKit.UIImage(named: "personal_share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personal_share' is used in storyboard 'XCPersonal', but couldn't be loaded.") }
        if UIKit.UIImage(named: "personal_balance") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personal_balance' is used in storyboard 'XCPersonal', but couldn't be loaded.") }
        if UIKit.UIImage(named: "personal_vip") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'personal_vip' is used in storyboard 'XCPersonal', but couldn't be loaded.") }
        if _R.storyboard.xcPersonal().xcPersonalController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcPersonalController' could not be loaded from storyboard 'XCPersonal' as 'XCPersonalController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcRemind: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCRemind"
      let xcRemindController = StoryboardViewControllerResource<XCRemindController>(identifier: "XCRemindController")
      let xcRemindWriteController = StoryboardViewControllerResource<XCRemindWriteController>(identifier: "XCRemindWriteController")
      
      func xcRemindController(_: Void = ()) -> XCRemindController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcRemindController)
      }
      
      func xcRemindWriteController(_: Void = ()) -> XCRemindWriteController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcRemindWriteController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "recommend_arrow_right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'recommend_arrow_right' is used in storyboard 'XCRemind', but couldn't be loaded.") }
        if UIKit.UIImage(named: "navigationbar_menu") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'navigationbar_menu' is used in storyboard 'XCRemind', but couldn't be loaded.") }
        if UIKit.UIImage(named: "recommend_write") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'recommend_write' is used in storyboard 'XCRemind', but couldn't be loaded.") }
        if _R.storyboard.xcRemind().xcRemindController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcRemindController' could not be loaded from storyboard 'XCRemind' as 'XCRemindController'.") }
        if _R.storyboard.xcRemind().xcRemindWriteController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcRemindWriteController' could not be loaded from storyboard 'XCRemind' as 'XCRemindWriteController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcSetting: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCSetting"
      let xcSettingAboutController = StoryboardViewControllerResource<XCSettingAboutController>(identifier: "XCSettingAboutController")
      let xcSettingAccountManageController = StoryboardViewControllerResource<XCSettingAccountManageController>(identifier: "XCSettingAccountManageController")
      let xcSettingController = StoryboardViewControllerResource<XCSettingController>(identifier: "XCSettingController")
      let xcSettingPhoneShowController = StoryboardViewControllerResource<XCSettingPhoneShowController>(identifier: "XCSettingPhoneShowController")
      let xcSettingResettingPasswordController = StoryboardViewControllerResource<XCSettingResettingPasswordController>(identifier: "XCSettingResettingPasswordController")
      
      func xcSettingAboutController(_: Void = ()) -> XCSettingAboutController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcSettingAboutController)
      }
      
      func xcSettingAccountManageController(_: Void = ()) -> XCSettingAccountManageController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcSettingAccountManageController)
      }
      
      func xcSettingController(_: Void = ()) -> XCSettingController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcSettingController)
      }
      
      func xcSettingPhoneShowController(_: Void = ()) -> XCSettingPhoneShowController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcSettingPhoneShowController)
      }
      
      func xcSettingResettingPasswordController(_: Void = ()) -> XCSettingResettingPasswordController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcSettingResettingPasswordController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "share_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_logo' is used in storyboard 'XCSetting', but couldn't be loaded.") }
        if _R.storyboard.xcSetting().xcSettingAccountManageController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcSettingAccountManageController' could not be loaded from storyboard 'XCSetting' as 'XCSettingAccountManageController'.") }
        if _R.storyboard.xcSetting().xcSettingController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcSettingController' could not be loaded from storyboard 'XCSetting' as 'XCSettingController'.") }
        if _R.storyboard.xcSetting().xcSettingPhoneShowController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcSettingPhoneShowController' could not be loaded from storyboard 'XCSetting' as 'XCSettingPhoneShowController'.") }
        if _R.storyboard.xcSetting().xcSettingAboutController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcSettingAboutController' could not be loaded from storyboard 'XCSetting' as 'XCSettingAboutController'.") }
        if _R.storyboard.xcSetting().xcSettingResettingPasswordController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcSettingResettingPasswordController' could not be loaded from storyboard 'XCSetting' as 'XCSettingResettingPasswordController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcTakeOut: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCTakeOut"
      let xcTakeOutController = StoryboardViewControllerResource<XCTakeOutController>(identifier: "XCTakeOutController")
      let xcTakeOutShopController = StoryboardViewControllerResource<XCTakeOutShopController>(identifier: "XCTakeOutShopController")
      
      func xcTakeOutController(_: Void = ()) -> XCTakeOutController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcTakeOutController)
      }
      
      func xcTakeOutShopController(_: Void = ()) -> XCTakeOutShopController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcTakeOutShopController)
      }
      
      static func validate() throws {
        if _R.storyboard.xcTakeOut().xcTakeOutShopController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcTakeOutShopController' could not be loaded from storyboard 'XCTakeOut' as 'XCTakeOutShopController'.") }
        if _R.storyboard.xcTakeOut().xcTakeOutController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcTakeOutController' could not be loaded from storyboard 'XCTakeOut' as 'XCTakeOutController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcUser: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "XCUser"
      let xcUserAuthCodeController = StoryboardViewControllerResource<XCUserAuthCodeController>(identifier: "XCUserAuthCodeController")
      let xcUserCheckIDCardController = StoryboardViewControllerResource<XCUserCheckIDCardController>(identifier: "XCUserCheckIDCardController")
      let xcUserEditPasswordController = StoryboardViewControllerResource<XCUserEditPasswordController>(identifier: "XCUserEditPasswordController")
      let xcUserEditPayPasswordController = StoryboardViewControllerResource<XCUserEditPayPasswordController>(identifier: "XCUserEditPayPasswordController")
      let xcUserInputPhoneController = StoryboardViewControllerResource<XCUserInputPhoneController>(identifier: "XCUserInputPhoneController")
      let xcUserLoginController = StoryboardViewControllerResource<XCUserLoginController>(identifier: "XCUserLoginController")
      
      func xcUserAuthCodeController(_: Void = ()) -> XCUserAuthCodeController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcUserAuthCodeController)
      }
      
      func xcUserCheckIDCardController(_: Void = ()) -> XCUserCheckIDCardController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcUserCheckIDCardController)
      }
      
      func xcUserEditPasswordController(_: Void = ()) -> XCUserEditPasswordController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcUserEditPasswordController)
      }
      
      func xcUserEditPayPasswordController(_: Void = ()) -> XCUserEditPayPasswordController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcUserEditPayPasswordController)
      }
      
      func xcUserInputPhoneController(_: Void = ()) -> XCUserInputPhoneController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcUserInputPhoneController)
      }
      
      func xcUserLoginController(_: Void = ()) -> XCUserLoginController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: xcUserLoginController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "share_sina") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_sina' is used in storyboard 'XCUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_qq") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_qq' is used in storyboard 'XCUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tool_close") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tool_close' is used in storyboard 'XCUser', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share_weixin") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share_weixin' is used in storyboard 'XCUser', but couldn't be loaded.") }
        if _R.storyboard.xcUser().xcUserInputPhoneController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcUserInputPhoneController' could not be loaded from storyboard 'XCUser' as 'XCUserInputPhoneController'.") }
        if _R.storyboard.xcUser().xcUserLoginController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcUserLoginController' could not be loaded from storyboard 'XCUser' as 'XCUserLoginController'.") }
        if _R.storyboard.xcUser().xcUserCheckIDCardController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcUserCheckIDCardController' could not be loaded from storyboard 'XCUser' as 'XCUserCheckIDCardController'.") }
        if _R.storyboard.xcUser().xcUserAuthCodeController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcUserAuthCodeController' could not be loaded from storyboard 'XCUser' as 'XCUserAuthCodeController'.") }
        if _R.storyboard.xcUser().xcUserEditPasswordController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcUserEditPasswordController' could not be loaded from storyboard 'XCUser' as 'XCUserEditPasswordController'.") }
        if _R.storyboard.xcUser().xcUserEditPayPasswordController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'xcUserEditPayPasswordController' could not be loaded from storyboard 'XCUser' as 'XCUserEditPayPasswordController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct xcaMap: Rswift.StoryboardResourceType {
      let bundle = R.hostingBundle
      let name = "XCAMap"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
